"
This offers a source anchor that connects a sourced entity to a file through a relative path stored in the fileName. In addition, the source can be further specified with a startLine and an endLine number in the file.
"
Trait {
	#name : #FamixTFileAnchor,
	#instVars : [
		'#correspondingFile => FMOne type: #FamixTFile opposite: #anchors',
		'#encoding => FMProperty',
		'#fileName => FMProperty',
		'#multipleFileAnchor => FMMany type: #FamixTMultipleFileAnchor opposite: #allFiles'
	],
	#category : #'Famix-Traits-SourceAnchor'
}

{ #category : #meta }
FamixTFileAnchor classSide >> annotation [

	<FMClass: #TFileAnchor super: #Object>
	<package: #'Famix-Traits'>
	<generated>
	^self
]

{ #category : #adding }
FamixTFileAnchor >> addMultipleFileAnchor: anObject [
	<generated>
	^ self multipleFileAnchor add: anObject
]

{ #category : #adding }
FamixTFileAnchor >> addToFile: entity [
	^ self correspondingFile addEntity: entity
]

{ #category : #accessing }
FamixTFileAnchor >> completeText [
	self sourcesAreReadable ifFalse: [ ^ '' ].
	
	^ self fileReference
		binaryReadStreamDo:
			[ :in | (ZnCharacterReadStream on: in encoding: self encoding) upToEnd ]
]

{ #category : #accessing }
FamixTFileAnchor >> containerFiles [
	^ self correspondingFile ifNil: [ {} ] ifNotNil: [ :file | {file} ]
]

{ #category : #accessing }
FamixTFileAnchor >> correspondingFile [
	"Relation named: #correspondingFile type: #FamixTFile opposite: #anchors"

	<generated>
	<FMComment: 'File associated to this source anchor'>
	^ correspondingFile
]

{ #category : #accessing }
FamixTFileAnchor >> correspondingFile: anObject [

	<generated>
	correspondingFile := anObject
]

{ #category : #decoding }
FamixTFileAnchor >> detectEncoding [
	self fileReference exists
		ifFalse: [ ^ nil ].
	^ [ self fileReference binaryReadStreamDo: [ :in | (ZnCharacterEncoder detectEncoding: in upToEnd) identifier ] ]
		on: ZnCharacterEncodingError
		do: [ nil ]
]

{ #category : #accessing }
FamixTFileAnchor >> encoding [
	<FMProperty: #encoding type: #String>
	<FMComment: 'A string representing the encoding of a file'>
	^ encoding ifNil: [ encoding := self detectEncoding ]
]

{ #category : #accessing }
FamixTFileAnchor >> encoding: anObject [
	<generated>
	encoding := anObject
]

{ #category : #accessing }
FamixTFileAnchor >> fileName [

	<FMProperty: #fileName type: #String>
	<generated>
	<FMComment: 'Name of the source file'>
	^ fileName
]

{ #category : #accessing }
FamixTFileAnchor >> fileName: aFileName [
	fileName := aFileName copyReplaceAll: '\' with: '/'. 
]

{ #category : #accessing }
FamixTFileAnchor >> fileReference [
	^ self rootFolder asFileReference resolve: self fileName
]

{ #category : #accessing }
FamixTFileAnchor >> hasSourceText [
	^ self completeText notEmpty 
]

{ #category : #testing }
FamixTFileAnchor >> isFile [
	^ true
]

{ #category : #accessing }
FamixTFileAnchor >> lineCount [
	^ self hasSourceText 
		ifTrue: [ self sourceText lineCount ]
		ifFalse: [ self notExistentMetricValue ]
	
]

{ #category : #printing }
FamixTFileAnchor >> mooseNameOn: aStream [
	aStream nextPutAll: self fileName asString
]

{ #category : #accessing }
FamixTFileAnchor >> multipleFileAnchor [
	"Relation named: #multipleFileAnchor type: #FamixTMultipleFileAnchor opposite: #allFiles"

	<generated>
	<FMComment: 'The multiple file anchors I''m part of'>
	^ multipleFileAnchor
]

{ #category : #accessing }
FamixTFileAnchor >> multipleFileAnchor: anObject [

	<generated>
	multipleFileAnchor value: anObject
]

{ #category : #private }
FamixTFileAnchor >> privateHasEncoding [
	^ encoding isNotNil
]

{ #category : #initialization }
FamixTFileAnchor >> rootFolder [
	^ self mooseModel rootFolder
]

{ #category : #initialization }
FamixTFileAnchor >> setCorrespondingFile [
	"files have already been added to the model"
	^ self mooseModel allFiles asOrderedCollection
		detect: [ :file | file mooseName = self fileName ]
		ifFound: [ :aFile | self correspondingFile: aFile ]
]

{ #category : #accessing }
FamixTFileAnchor >> sourceText [

	"I should be overriden in my users"
	^ String new
]

{ #category : #testing }
FamixTFileAnchor >> sourcesAreReadable [
	| file |
	^ (file := self fileReference) exists and: [ file size > 0 ]
]
